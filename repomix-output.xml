This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
static/
  chat.css
  chat.js
  plan_calendar.js
  plan_intake.js
  script.js
  styles.css
templates/
  chatbot.html
  diagnostic.html
  index.html
  learning_styles.html
  results.html
  schedule.html
topic_prompts/
  diagnostic_test.txt
  initial_prompt.txt
  study_plan_prompt.txt
.gitignore
c2cbot.code-workspace
diagnostic_test.txt
pyproject.toml
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="static/chat.js">
document.addEventListener('DOMContentLoaded', () => {
  const chatForm = document.getElementById('chat-form');
  const chatInput = document.getElementById('chat-input');
  const chatBox = document.getElementById('chat-box');

  chatForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const message = chatInput.value.trim();
      if (!message) return;

      appendMessage('You', message);
      chatInput.value = '';

      try {
          const response = await fetch('/chat', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ message: message, subject: "General" })
          });

          const data = await response.json();
          appendMessage('AI', data.response || "Error: No response from AI.");
      } catch (error) {
          appendMessage('AI', 'Error: Could not reach server.');
      }
  });

  function appendMessage(sender, text) {
      const messageElement = document.createElement('div');
      messageElement.textContent = `${sender}: ${text}`;
      chatBox.appendChild(messageElement);
      chatBox.scrollTop = chatBox.scrollHeight;
  }
});
</file>

<file path="static/plan_calendar.js">
/* ------------------------------------------------------------
   plan_calendar.js
   — render the study‑plan JSON into a calendar grid, show
     details on click, and expose a “Regenerate Plan” button
     that dispatches  plan:regenerate.
------------------------------------------------------------ */

(() => {
    const root = document.getElementById("calendar-root");
    if (!root) return console.error("plan_calendar.js ➜ #calendar-root not found");
  
    /* ───────────────────────── helpers ───────────────────────── */
  
    const dayNames   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    const monthNames = [
      "January","February","March","April","May","June",
      "July","August","September","October","November","December"
    ];
  
    const safeParse = (txt) => { try { return JSON.parse(txt); } catch { return null; } };
  
    /* convert “5:30pm-7:30pm” → {start:"17:30", end:"19:30"} */
    function splitTimeRange(range) {
      if (!range) return null;
      const [rawStart, rawEnd] = range.split("-").map(s => s.trim());
      if (!rawStart || !rawEnd) return null;
  
      const to24h = (str) => {
        const m = str.match(/(\d{1,2})(?::(\d{2}))?\s*(am|pm)?/i);
        if (!m) return null;
        let [, h, mm = "00", ap = ""] = m;
        h  = parseInt(h, 10);
        ap = ap.toLowerCase();
        if (ap === "pm" && h !== 12) h += 12;
        if (ap === "am" && h === 12) h  = 0;
        return `${String(h).padStart(2,"0")}:${mm}`;
      };
  
      const start = to24h(rawStart);
      const end   = to24h(rawEnd);
      return start && end ? { start, end } : null;
    }
  
    /**
     * Try‑hard extractor: returns an **array** of session objects
     * from many possible shapes the backend / LLM might return.
     */
    function extractSessions(plan) {
      if (!plan || typeof plan !== "object") return null;
  
      for (const k of ["sessions","study_plan","days","items"])
        if (Array.isArray(plan[k])) return plan[k];
  
      /* markdown‑wrapped string under plan.raw */
      if (typeof plan.raw === "string") {
        let txt = plan.raw.trim();
        if (txt.startsWith("```")) {
          txt = txt.replace(/^```json\s*/i, "").replace(/```$/i, "").trim();
        }
        const inner = safeParse(txt);
        if (inner) return extractSessions(inner);         // recurse once
      }
      return null;
    }
  
    /* ───────────────────── calendar renderer ─────────────────── */
  
    function renderCalendar(plan) {
      const sessionsIn = extractSessions(plan);
  
      if (!sessionsIn) {
        root.innerHTML = `
          <div style="border:1px solid #e74c3c;padding:16px;border-radius:8px;background:#fdecea;color:#c0392b;">
            <p><strong>Oops!</strong> I couldn’t understand the study‑plan format returned by the server.</p>
            <button class="btn-secondary" id="regen-btn">Regenerate Plan</button>
          </div>`;
        root.querySelector("#regen-btn").onclick =
          () => document.dispatchEvent(new Event("plan:regenerate"));
        return;
      }
  
      /* cache for page refreshes */
      try { localStorage.setItem("latestStudyPlan", JSON.stringify(plan)); } catch { /* ignore quota */ }
  
      /* normalise every item to a common shape */
      const sessions = sessionsIn.map(item => {
        const t = splitTimeRange(item.time || item.timeslot || item.period || "");
        return {
          date:   item.date,
          start:  t?.start || item.start || "?",
          end:    t?.end   || item.end   || "?",
          subject: item.subject || item.content || "",
          label:  item.label || "",
          instructions: item.instructions || item.focus || item.note || "",
          type:   item.type || (item.label ? "test" : "study")
        };
      });
  
      /* group by ISO date */
      const byDate = {};
      sessions.forEach(s => {
        if (s.date) (byDate[s.date] = byDate[s.date] || []).push(s);
      });
  
      /* decide which month to show:
         – earliest session’s month, else current month            */
      let baseDate = new Date();
      const allDates = Object.keys(byDate);
      if (allDates.length) {
        allDates.sort();                              // lexicographic → chronological for ISO
        baseDate = new Date(allDates[0] + "T00:00:00");
      }
  
      const month     = baseDate.getMonth();
      const year      = baseDate.getFullYear();
      const firstDay  = new Date(year, month, 1).getDay();
      const daysInMon = new Date(year, month + 1, 0).getDate();
  
      /* header & grid scaffold */
      root.innerHTML = `
        <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;">
          <h2>${monthNames[month]} ${year}</h2>
          <button class="btn-secondary" id="regen-btn">Regenerate Plan</button>
        </div>
        <div class="calendar-grid" style="display:grid;grid-template-columns:repeat(7,1fr);gap:8px;"></div>
        <div id="detail-box" style="margin-top:20px;"></div>
      `;
  
      const grid = root.querySelector(".calendar-grid");
      dayNames.forEach(d => {
        const hd = document.createElement("div");
        hd.textContent = d;
        hd.style = "font-weight:bold;text-align:center;";
        grid.appendChild(hd);
      });
  
      for (let i = 0; i < firstDay; i++) grid.appendChild(emptyCell());
  
      for (let d = 1; d <= daysInMon; d++) {
        const iso  = new Date(year, month, d).toISOString().split("T")[0];
        const cell = document.createElement("div");
        cell.className = "day-cell";
        cell.style = "border:1px solid #e0e0e0;min-height:90px;padding:4px;border-radius:6px;cursor:pointer;";
  
        const header = document.createElement("div");
        header.textContent = d;
        header.style = "font-weight:bold;margin-bottom:4px;";
        cell.appendChild(header);
  
        (byDate[iso] || []).forEach(s => {
          const block = document.createElement("div");
          const kind  = s.type === "test" ? "test" : "session";
          block.className = `${kind}-block`;
          block.textContent =
            kind === "test"
              ? (s.label || "Test")
              : `${s.subject || "Study"} • ${s.start}-${s.end}`;
          block.style = `
            font-size:11px;padding:2px 4px;margin-bottom:2px;border-radius:3px;color:#fff;
            background:${kind === "test" ? "#2ecc71" : "#3498db"};
          `;
          cell.appendChild(block);
        });
  
        cell.addEventListener("click", () => showDetails(iso, byDate[iso] || []));
        grid.appendChild(cell);
      }
  
      root.querySelector("#regen-btn").onclick =
        () => document.dispatchEvent(new Event("plan:regenerate"));
    }
  
    const emptyCell = () => {
      const d = document.createElement("div");
      d.style = "min-height:90px;";
      return d;
    };
  
    /* ──────────────────── accordion details ─────────────────── */
  
    function showDetails(dateISO, sessions) {
      const box = document.getElementById("detail-box");
      if (!sessions.length) {
        box.innerHTML = `<p>No sessions on ${dateISO}</p>`;
        return;
      }
      box.innerHTML = `
        <h3>📅 ${dateISO}</h3>
        <ul style="list-style:disc inside;margin-left:16px;">
          ${sessions.map(s => `
            <li style="margin:6px 0;">
              <strong>${s.start}-${s.end}</strong> — ${s.subject || s.label || "Study"}<br>
              <em>${s.instructions || "No details provided."}</em>
            </li>`).join("")}
        </ul>`;
      box.scrollIntoView({ behavior:"smooth" });
    }
  
    /* ─────────────────────── bootstrap ─────────────────────── */
  
    const cached = localStorage.getItem("latestStudyPlan");
    if (cached) {
      try { renderCalendar(JSON.parse(cached)); }
      catch (e) { console.warn("cached plan unreadable", e); }
    }
  
    document.addEventListener("plan:ready", e => renderCalendar(e.detail));
  })();
</file>

<file path="static/plan_intake.js">
/* 
  wizard that gathers:
      • study goals / subjects
      • deadlines (label + date list)
      • weekly availability  → busy & free blocks
    Merges learner profile (window.LEARNER_PROFILE) and POSTs to
    /generate_study_plan.  Emits  plan:ready  with the LLM‑crafted
    plan JSON so plan_calendar.js can render it.

    The wizard also listens for  plan:regenerate  (e.g. user clicks
    “Regenerate” on the calendar) and resends the last payload.      */

(() => {
    /* ‑‑‑ quick DOM helpers ‑‑‑ */
    const $  = (sel, ctx = document) => ctx.querySelector(sel);
    const $$ = (sel, ctx = document) => [...ctx.querySelectorAll(sel)];
    const root = document.getElementById("intake-root");
    if (!root) return console.error("plan_intake.js ➜ #intake-root not found");
  
    /* ‑‑‑ learner profile (diagnostic summary / learning style) ‑‑‑ */
    window.LEARNER_PROFILE = {};            // make globally visible
    let diagnosticSummary = "";             // cached string for wizard display
  
    /* ‑‑‑ wizard state ‑‑‑ */
    const state = {
      goals: "",
      deadlines: [],                        // {label,date}
      busy : {0: [],1: [],2: [],3: [],4: [],5: [],6: []},
      free : {0: [],1: [],2: [],3: [],4: [],5: [],6: []}
    };
    let currentStep = 0;
    let lastPayload = null;                 // for regenerate shortcut
  
    /* ‑‑‑ UI templates for each step ‑‑‑ */
    const stepTemplates = [
      /* STEP 1: goals */
      () => `
        <h2>1 · Study goals / subjects</h2>
        ${diagnosticSummary
          ? `<div class="diag-summary" style="background:#f0f4ff;border-left:4px solid #4677ff;padding:8px 12px;margin-bottom:12px;">
               <strong>Diagnostic summary:</strong><br>${diagnosticSummary}
             </div>`
          : ""
        }
        <textarea id="goals-input" rows="5"
          placeholder="e.g. Algebra II chapters 5‑7, score ≥ 85 % on 15 May test"
          style="width:100%;"></textarea>
      `,
  
      /* STEP 2: deadlines */
      () => `
        <h2>2 · Deadlines & tests</h2>
        <p>Add important dates (exam, quiz, assignment, etc.).</p>
        <div id="deadline-list"></div>
        <button class="btn-secondary" id="add-deadline">+ Add deadline</button>
      `,
  
      /* STEP 3: availability */
      () => {
        const dayNames = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
        return `
          <h2>3 · Weekly availability</h2>
          <p>Enter time ranges in 24‑hour format “HH:MM‑HH:MM”. Use commas for multiple blocks.</p>
          <table style="width:100%;border-collapse:collapse;">
            <thead>
              <tr><th></th><th>Busy</th><th>Usually Free (optional)</th></tr>
            </thead>
            <tbody>
              ${dayNames.map((d,i)=>`
                <tr>
                  <td style="padding-right:4px;">${d}</td>
                  <td><input data-day="${i}" data-type="busy" style="width:100%;" placeholder="e.g. 09:00‑17:00"></td>
                  <td><input data-day="${i}" data-type="free" style="width:100%;" placeholder="e.g. 18:00‑20:00"></td>
                </tr>`).join("")}
            </tbody>
          </table>
        `;
      },
  
      /* REVIEW + submit */
      () => `
        <h2>4 · Review & generate</h2>
        <p>Click <strong>Generate Plan</strong> to create your personalised calendar.</p>
        <ul>
          <li><strong>Goals:</strong> ${state.goals || "<em>none</em>"}</li>
          <li><strong>Deadlines:</strong> ${
            state.deadlines.length
              ? state.deadlines.map(d=>`${d.label} (${d.date})`).join(", ")
              : "<em>none</em>"
          }</li>
        </ul>
        <button class="btn-primary" id="generate-plan">Generate Plan</button>
      `
    ];
  
    /* ‑‑‑ render helper ‑‑‑ */
    function renderStep() {
      root.innerHTML = `
        <div class="wizard-box">
          ${stepTemplates[currentStep]()}
          <div style="margin-top:20px;display:flex;justify-content:${currentStep ? "space-between" : "flex-end"}">
            ${currentStep ? '<button class="btn-secondary" id="prev">Back</button>' : ""}
            ${currentStep < stepTemplates.length-1 ? '<button class="btn-primary" id="next">Next</button>' : ""}
          </div>
        </div>
      `;
      attachHandlers();
    }
  
    /* ‑‑‑ attach event handlers for current step ‑‑‑ */
    function attachHandlers() {
      $("#next")?.addEventListener("click", () => { if (saveStep()) { currentStep++; renderStep(); }});
      $("#prev")?.addEventListener("click", () => { currentStep--; renderStep(); });
  
      /* step‑specific hooks */
      if (currentStep === 0) {
        $("#goals-input").value = state.goals;
      }
      if (currentStep === 1) {
        const list = $("#deadline-list");
        state.deadlines.forEach(addRow);
        $("#add-deadline").addEventListener("click", () => addRow());
        function addRow(d = { label:"", date:"" }) {
          const row = document.createElement("div");
          row.style = "display:flex;gap:6px;margin:6px 0";
          row.innerHTML = `
            <input placeholder="Label" style="flex:2" value="${d.label}">
            <input type="date"        style="flex:1" value="${d.date}">
            <button class="btn-secondary" title="remove">✕</button>`;
          row.querySelector("button").onclick = () => row.remove();
          list.appendChild(row);
        }
      }
      if (currentStep === 2) {
        $$("input[data-day]").forEach(inp => {
          const day = inp.dataset.day, typ = inp.dataset.type;
          inp.value = (state[typ][day] || []).join(", ");
        });
      }
      /* final step */
      $("#generate-plan")?.addEventListener("click", submitWizard);
    }
  
    /* ‑‑‑ save inputs of current step into state ‑‑‑ */
    function saveStep() {
      if (currentStep === 0) {
        state.goals = $("#goals-input").value.trim();
        return true;
      }
      if (currentStep === 1) {
        const rows = [...$("#deadline-list").children];
        state.deadlines = rows.map(r => {
          const [label, date] = r.querySelectorAll("input");
          return { label: label.value.trim(), date: date.value };
        }).filter(d => d.label && d.date);
        return true;
      }
      if (currentStep === 2) {
        $$("input[data-day]").forEach(inp => {
          const { day, type } = inp.dataset;
          const ranges = inp.value.split(",").map(s => s.trim()).filter(Boolean);
          state[type][day] = ranges;
        });
        return true;
      }
      return true;
    }
  
    /* ‑‑‑ build payload & POST to backend ‑‑‑ */
    function submitWizard() {
      if (!saveStep()) return;
  
      const payload = {
        diagnostic_summary : window.LEARNER_PROFILE?.diagnostic_summary || "",
        learning_style     : window.LEARNER_PROFILE?.learning_style     || "",
        study_goals        : state.goals,
        deadlines_json     : state.deadlines,
        busy_json          : state.busy,
        free_json          : state.free
      };
      lastPayload = payload;                 // cache for regenerate
  
      root.innerHTML = "<p>⏳ Generating your plan…</p>";
  
      fetch("/generate_study_plan", {
        method  : "POST",
        headers : { "Content-Type": "application/json" },
        body    : JSON.stringify(payload)
      })
      .then(r => r.ok ? r.json() : Promise.reject(r))
      .then(data => {
        if (!data.study_plan) throw new Error("No study_plan in response");
        document.dispatchEvent(new CustomEvent("plan:ready", { detail: data.study_plan }));
        root.innerHTML = "";                 // hide wizard
      })
      .catch(err => {
        console.error("Plan generation failed", err);
        root.innerHTML = "<p style='color:red'>Failed to generate plan. Please try again.</p>";
      });
    }
  
    /* ‑‑‑ public “regenerate” listener ‑‑‑ */
    document.addEventListener("plan:regenerate", () => {
      if (lastPayload) {
        fetch("/generate_study_plan", {
          method  : "POST",
          headers : { "Content-Type": "application/json" },
          body    : JSON.stringify(lastPayload)
        })
        .then(r => r.ok ? r.json() : Promise.reject(r))
        .then(data => {
          if (data.study_plan) {
            document.dispatchEvent(new CustomEvent("plan:ready", { detail: data.study_plan }));
          }
        })
        .catch(() => alert("Couldn’t regenerate plan – server error."));
      } else {
        currentStep = 0; renderStep();
      }
    });
  
    /* ‑‑‑ initialise: fetch learner profile then start wizard ‑‑‑ */
    root.innerHTML = "<p>Loading learner profile…</p>";
    fetch("/get_user_profile")
      .then(r => r.ok ? r.json() : Promise.reject(r))
      .then(data => {
        window.LEARNER_PROFILE  = data || {};
        diagnosticSummary       = data.diagnostic_summary || "";
      })
      .catch(err => {
        console.warn("Could not fetch learner profile:", err);
      })
      .finally(() => {
        renderStep();
      });
  })();
</file>

<file path="static/script.js">
// Wait for the document to load
document.addEventListener('DOMContentLoaded', () => {
    const signInForm = document.getElementById('sign-in-form');
    const signUpForm = document.getElementById('sign-up-form');
  
    if (signInForm) {
      signInForm.addEventListener('submit', (e) => {
        e.preventDefault();
        // Implement sign-in functionality here
        alert('Sign In functionality is not implemented.');
      });
    }
  
    if (signUpForm) {
      signUpForm.addEventListener('submit', (e) => {
        e.preventDefault();
        // Implement sign-up functionality here
        alert('Sign Up functionality is not implemented.');
      });
    }
  });
  
  // Function to toggle modals
  function toggleModal(modalId) {
    const modal = document.getElementById(modalId);
    if (!modal) return;
    if (modal.style.display === "flex") {
      modal.style.display = "none";
    } else {
      modal.style.display = "flex";
    }
  }
  
  // Close modal if clicking outside the modal content
  window.onclick = function (event) {
    const modals = document.querySelectorAll('.modal');
    modals.forEach((modal) => {
      if (event.target === modal) {
        modal.style.display = "none";
      }
    });
  };
</file>

<file path="templates/results.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Scholar AI - Results</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}" />
  <style>
    /* Results Page Styles */
    .results-section {
      background: #f9f9f9;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 30px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .results-section h3 {
      color: #2c3e50;
      margin-top: 0;
      border-bottom: 1px solid #eee;
      padding-bottom: 10px;
    }

    #progress-chart {
      background: #fff;
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 20px;
      min-height: 200px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .placeholder {
      color: #999;
      font-style: italic;
    }

    .btn {
      display: inline-block;
      background: #3498db;
      color: white;
      padding: 10px 15px;
      border-radius: 4px;
      text-decoration: none;
      margin-top: 10px;
      border: none;
      cursor: pointer;
    }

    .btn:hover {
      background: #2980b9;
    }

    /* Video Section Styles */
    .video-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .video-card {
      border: 1px solid #ddd;
      border-radius: 8px;
      overflow: hidden;
      transition: transform 0.3s;
    }
    
    .video-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .video-thumbnail {
      position: relative;
      padding-bottom: 56.25%; /* 16:9 aspect ratio */
      cursor: pointer;
    }
    
    .video-thumbnail img {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .video-info {
      padding: 15px;
    }
    
    .video-info h4 {
      margin: 0 0 10px 0;
      font-size: 16px;
    }
    
    .video-info p {
      margin: 5px 0;
      font-size: 14px;
      color: #666;
    }
    
    .embedded-video {
      width: 100%;
      aspect-ratio: 16/9;
      margin-bottom: 20px;
      border: none;
    }

    #video-search-form {
      margin: 20px 0;
    }

    #no-videos-message {
      color: #666;
      font-style: italic;
    }
  </style>
  <script defer src="{{ url_for('static', filename='script.js') }}"></script>
</head>
<body>
  <header>
    <div class="container">
      <h1>Scholar AI</h1>
      <nav>
        <ul>
          <li><a href="/">Home</a></li>
          <li class="dropdown">
            <a href="javascript:void(0)" class="dropbtn">Tests</a>
            <div class="dropdown-content">
              <a href="/diagnostic">Diagnostic Test</a>
              <a href="/learning_style">Learning Style</a>
            </div>
          </li>
          <li><a href="/chatbot">Chatbot</a></li>
          <li><a href="/schedule">Schedule</a></li>
          <li><a href="/results">Results</a></li>
        </ul>
      </nav>
    </div>
  </header>

  <section id="results" class="results">
    <div class="container">
      <h2>Your Results</h2>
      
      <!-- Diagnostic Test Results Section -->
      <div id="diagnostic-results" class="results-section">
        <h3>Diagnostic Test Performance</h3>
        <div id="test-results-content">
          {% if diagnostic_results %}
            <p>{{ diagnostic_results }}</p>
          {% else %}
            <p>No diagnostic test results available. Complete a diagnostic test to see your results.</p>
            <a href="/diagnostic" class="btn">Take Diagnostic Test</a>
          {% endif %}
        </div>
      </div>
      
      <!-- Learning Style Results Section -->
      <div id="learning-style-results" class="results-section">
        <h3>Learning Style Assessment</h3>
        <div id="learning-style-content">
          {% if learning_style_results %}
            <p>{{ learning_style_results }}</p>
          {% else %}
            <p>No learning style assessment completed. Take the assessment to discover your preferred learning style.</p>
            <a href="/learning_style" class="btn">Take Learning Style Assessment</a>
          {% endif %}
        </div>
      </div>

      <!-- Educational Videos Section -->
      <div id="educational-videos" class="results-section">
        <h3>Recommended Educational Videos</h3>
        
        <!-- Video search form (hidden when videos are shown) -->
        <div id="video-search-form" {% if not test_answers.topic %}style="display: none;"{% endif %}>
          <input type="hidden" id="video-topic" value="{{ test_answers.topic if test_answers else '' }}">
          <button id="find-videos-btn" class="btn">Find Related Videos</button>
        </div>
        
        <!-- Video results container -->
        <div id="video-results-container" class="video-container">
          <!-- Videos will be loaded here -->
          <p id="no-videos-message">No videos loaded yet. {% if test_answers.topic %}Click "Find Related Videos" to see recommendations.{% else %}Complete a diagnostic test to get video recommendations.{% endif %}</p>
        </div>
      </div>
      
      <!-- Progress Tracking Section -->
      <div id="progress-tracking" class="results-section">
        <h3>Progress Over Time</h3>
        <div id="progress-content">
          <p>Your progress tracking will appear here after multiple assessments.</p>
          <div id="progress-chart">
            <!-- This could be replaced with a chart from Chart.js or similar -->
            <p class="placeholder">Progress chart will be displayed here</p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <footer>
    <div class="container">
      <p>&copy; 2025 Scholar AI. All rights reserved.</p>
    </div>
  </footer>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const videoTopic = document.getElementById('video-topic')?.value;
      const findVideosBtn = document.getElementById('find-videos-btn');
      
      // Handle video search
      findVideosBtn?.addEventListener('click', function() {
        if (!videoTopic) return;
        
        this.disabled = true;
        this.textContent = 'Loading...';
        document.getElementById('no-videos-message').textContent = 'Searching for videos...';
        
        fetch('/search_videos', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ topic: videoTopic + ' educational' })
        })
        .then(response => {
          if (!response.ok) throw new Error('Network response was not ok');
          return response.json();
        })
        .then(data => {
          displayVideos(data.videos || []);
          findVideosBtn.textContent = 'Refresh Videos';
          findVideosBtn.disabled = false;
        })
        .catch(error => {
          console.error('Error:', error);
          document.getElementById('no-videos-message').textContent = 'Failed to load videos. Please try again later.';
          findVideosBtn.textContent = 'Try Again';
          findVideosBtn.disabled = false;
        });
      });
      
      function displayVideos(videos) {
        const container = document.getElementById('video-results-container');
        
        if (!videos || videos.length === 0) {
          container.innerHTML = '<p id="no-videos-message">No videos found for this topic.</p>';
          return;
        }
        
        container.innerHTML = '';
        
        videos.forEach(video => {
          const videoCard = document.createElement('div');
          videoCard.className = 'video-card';
          
          videoCard.innerHTML = `
            <div class="video-thumbnail" onclick="embedVideo('${video.video_id}', this)">
              <img src="${video.thumbnail}" alt="${video.title}">
            </div>
            <div class="video-info">
              <h4>${video.title}</h4>
              <p>Channel: ${video.channel}</p>
            </div>
          `;
          
          container.appendChild(videoCard);
        });
      }
      
      // Make embedVideo function available globally
      window.embedVideo = function(videoId, clickedElement) {
        const container = document.getElementById('video-results-container');
        
        // Create back button
        const backButton = document.createElement('button');
        backButton.className = 'btn';
        backButton.textContent = 'Back to Videos';
        backButton.onclick = function() {
          // Trigger the video search again to show all videos
          document.getElementById('find-videos-btn').click();
        };
        
        // Create video iframe
        const videoIframe = document.createElement('iframe');
        videoIframe.className = 'embedded-video';
        videoIframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
        videoIframe.setAttribute('frameborder', '0');
        videoIframe.setAttribute('allowfullscreen', '');
        videoIframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');
        
        // Clear container and add new elements
        container.innerHTML = '';
        container.appendChild(backButton);
        container.appendChild(videoIframe);
        
        // Scroll to video section
        document.getElementById('educational-videos').scrollIntoView({ behavior: 'smooth' });
      };
    });
  </script>
</body>
</html>
</file>

<file path="topic_prompts/diagnostic_test.txt">
Your job is only to make 10 diagnostic questions based on the subject and grade level put in by the user.
</file>

<file path="topic_prompts/study_plan_prompt.txt">
System
You are Scholar AI Planner, an expert educational coach who produces concise, calendar‑friendly study sessions.
Always output valid JSON following the “study_plan” schema.

User
Learner profile:
• Diagnostic strengths / weaknesses: {diagnostic_summary}
• Preferred learning style: {learning_style}

Study objectives:
• Goals / subjects: {study_goals}
• Upcoming deadlines: {deadlines_json}

Availability:
• Busy blocks (ISO dates + HH:MM ranges): {busy_json}
• Typical free windows: {free_json}

Guidelines:
• Break content into ≤ 2‑hour blocks.  
• Match study methods to the learning style.  
• Emphasise weak areas; light review on strengths.  
• Final 24 h pre‑test = recap only.  

Output **only JSON**, never prose.
</file>

<file path=".gitignore">
.qodo
</file>

<file path="c2cbot.code-workspace">
{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {}
}
</file>

<file path="diagnostic_test.txt">
Directive for ChatBot:
You are tasked with creating a 10 question diagnostic test for a student to see how well they know the specific subject they choose. These questions will be number 1-10 with variance in each question providing either a free response question or a multiple choice question that has 4 answer choices. Each question should be separated by a line break and a dashed line. Your purpose is to create different questions to see what the student knows and what the student doesn’t.
</file>

<file path="pyproject.toml">
[tool.poetry]
name = "python-template"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]

[tool.poetry.dependencies]
python = ">=3.10.0,<3.11"
flask = "^3.0.0"
gunicorn = "^21.2.0"
flask-session = "^0.8.0"
openai = "^1.16.1"

[tool.pyright]
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
useLibraryCodeForTypes = true
exclude = [".cache"]

[tool.ruff]
# https://beta.ruff.rs/docs/configuration/
select = ['E', 'W', 'F', 'I', 'B', 'C4', 'ARG', 'SIM']
ignore = ['W291', 'W292', 'W293']

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
</file>

<file path="README.md">
# ScholarAI
</file>

<file path="static/chat.css">
/* Chat Container */
.chat-container {
  background: #f2f2f2;
  border-radius: 12px;
  padding: 20px;
  margin-top: 20px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

/* Chat Log */
.chat-log {
  max-height: 500px;
  overflow-y: auto;
  border: 1px solid #dcdcdc;
  padding: 15px;
  margin-bottom: 15px;
  border-radius: 8px;
  background: #ffffff;
}

/* Chat Message */
.chat-message {
  margin-bottom: 12px;
  font-size: 1rem;
  line-height: 1.5;
  font-family: 'Poppins', sans-serif;
}

/* Chat Form */
.chat-form {
  display: flex;
  gap: 10px;
  align-items: center;
  justify-content: space-between;
}

/* Chat Input */
#chat-input {
  flex: 3;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 0.95rem;
  min-height: 50px;
  resize: none;
  background: #f5f5f5;
  font-family: 'Poppins', sans-serif;
}

/* Send Button */
.send-button {
  padding: 12px 24px;
  border: none;
  background: #4a90e2;
  color: #fff;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1rem;
  transition: background 0.3s;
  flex: 1;
  font-family: 'Poppins', sans-serif;
}

.send-button:hover {
  background: #357ab7;
}

/* Chat History */
.chat-history {
  background: #ffffff;
  padding: 15px;
  border-radius: 8px;
  margin-top: 20px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
}

/* Chat Instructions */
.chat-instructions {
  background: #e6e6e6;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
}

.chat-instructions h2 {
  font-size: 1.5rem;
  margin-bottom: 10px;
}

/* Responsive Design */
@media (max-width: 768px) {
  .chat-form {
      flex-direction: column;
  }

  #chat-input {
      width: 100%;
      border-radius: 8px;
  }

  .send-button {
      width: 100%;
      border-radius: 8px;
  }
}
</file>

<file path="static/styles.css">
/* Global Styles */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
body {
  font-family: 'Merriweather', serif;
  line-height: 1.6;
  background-color: #f8f9fa;
  color: #2c3e50;
}
.container {
  width: 90%;
  max-width: 1200px;
  margin: auto;
}
/* Header Styles */
header {
  background: #1b2a4e;
  color: #ffffff;
  padding: 25px 0;
}
header .container {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
header h1 {
  font-family: 'Playfair Display', serif;
  margin: 0;
}
nav ul {
  list-style: none;
  display: flex;
}
nav ul li {
  margin: 0 15px;
}
nav ul li a {
  color: #ffffff;
  text-decoration: none;
  font-weight: bold;
  transition: color 0.3s;
}
nav ul li a:hover {
  color: #b0bec5;
}
/* Hero Section */
.hero {
  background: url('https://summer.harvard.edu/wp-content/uploads/sites/7/2022/06/how-to-study-like-a-harvard-student.jpg') no-repeat center center/cover;
  height: 400px;
  display: flex;
  align-items: center;
  text-align: center;
  color: #ffffff;
  position: relative;
  background-position: center;
}
.hero::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(27, 42, 78, 0.7);
  z-index: 1;
}
.hero .container {
  position: relative;
  z-index: 2;
}
.hero h2 {
  font-size: 2.5rem;
  margin-bottom: 10px;
  font-family: 'Playfair Display', serif;
}
.hero p {
  font-size: 1.2rem;
  margin-bottom: 20px;
}
.hero-buttons button {
  background: #546e7a;
  border: none;
  color: #fff;
  padding: 10px 20px;
  margin: 0 10px;
  cursor: pointer;
  font-size: 1rem;
  transition: background 0.3s;
}
.hero-buttons button:hover {
  background: #37474f;
}
/* Features Section */
.features {
  padding: 40px 0;
  background: #ffffff;
  text-align: center;
}
.features h2 {
  margin-bottom: 20px;
  font-family: 'Playfair Display', serif;
}
.feature {
  background: #eceff1;
  padding: 20px;
  margin: 20px;
  display: inline-block;
  width: 250px;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
/* About & Contact Sections */
.about, .contact {
  padding: 40px 0;
  background: #fff;
  text-align: center;
}
.about p{
  margin-bottom: 20px;
}
.about h2, .contact h2 {
  margin-bottom: 20px;
  font-family: 'Playfair Display', serif;
}
/* Footer */
footer {
  background: #1b2a4e;
  color: #fff;
  text-align: center;
  padding: 10px 0;
  margin-top: 20px;
}
/* Modal Styles */
.modal {
  display: none;
  position: fixed;
  z-index: 100;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
  align-items: center;
  justify-content: center;
}
.modal-content {
  background: #fff;
  margin: auto;
  padding: 20px;
  border-radius: 8px;
  width: 80%;
  max-width: 400px;
  position: relative;
  animation: fadeIn 0.3s;
}
.close {
  position: absolute;
  right: 15px;
  top: 10px;
  font-size: 24px;
  cursor: pointer;
}
/* Form Styles */
form input[type="text"],
form input[type="password"] {
  width: 100%;
  padding: 10px;
  margin: 10px 0;
  border: 1px solid #ddd;
  border-radius: 4px;
}
form button {
  width: 100%;
  background: #1b2a4e;
  color: #fff;
  border: none;
  padding: 10px;
  cursor: pointer;
  border-radius: 4px;
  transition: background 0.3s;
}
form button:hover {
  background: #102040;
}
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* The container <div> - needed to position the dropdown content */
.dropdown {
  position: relative;
  display: inline-block;
}

/* Dropdown Content (Hidden by Default) */
.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f1f1f1;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 1;
}

/* Links inside the dropdown */
.dropdown-content a {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

/* Change color of dropdown links on hover */
.dropdown-content a:hover {background-color: #ddd;}

/* Show the dropdown menu on hover */
.dropdown:hover .dropdown-content {display: block;}



.dropdown {
  position: relative;
  display: inline-block;
}

/* Style the dropdown content */
.dropdown-content {
  display: none;
  position: absolute;
  background-color: white;
  min-width: 160px;
  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
  z-index: 1;
}

/* Show dropdown when hovering over the parent "Tests" button */
.dropdown:hover .dropdown-content,
.dropdown-content:hover {
  display: block;
}

/* Ensure the dropdown container is positioned correctly */
.dropdown {
  position: relative;
  display: inline-block;
}

/* Style the dropdown content */
.dropdown-content {
  display: none;
  position: absolute;
  left: 0;
  top: 100%; /* Make sure it's directly below the button */
  background-color: white;
  min-width: 160px;
  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
  z-index: 1000;
}

/* Ensure no gap between the button and dropdown */
.dropdown:hover .dropdown-content,
.dropdown-content:hover {
  display: block;
}

/* Optional: Add padding to prevent flickering */
.dropdown-content {
  padding: 5px 0;
}

/* ================================================================== */
/* ===  New styles for Study Planner wizard & calendar (non‑breaking) */
.wizard-box{
  background:#ffffff;
  padding:25px;
  border-radius:8px;
  box-shadow:0 2px 6px rgba(0,0,0,0.05);
  margin:30px 0;
}
.btn-primary{
  background:#3498db;
  color:#fff;
  padding:10px 20px;
  border:none;
  border-radius:6px;
  cursor:pointer;
  transition:background 0.3s;
}
.btn-primary:hover{background:#2980b9;}
.btn-secondary{
  background:#95a5a6;
  color:#fff;
  padding:10px 20px;
  border:none;
  border-radius:6px;
  cursor:pointer;
  transition:background 0.3s;
}
.btn-secondary:hover{background:#7f8c8d;}
.session-block{
  background:#3498db;
  color:#fff;
  font-size:11px;
  padding:2px 4px;
  border-radius:3px;
  margin-bottom:2px;
  display:block;
}
.test-block{
  background:#2ecc71;
  color:#fff;
  font-size:11px;
  padding:2px 4px;
  border-radius:3px;
  margin-bottom:2px;
  display:block;
}
/* ================================================================== */
</file>

<file path="templates/schedule.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Study Planner | Scholar AI</title>

  <!-- global stylesheet -->
  <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}"/>

  <style>
    /* --- light, page‑specific tweaks only --- */
    #learner-summary{
      background:#f5f7fa;
      border-left:4px solid #1b2a4e;
      padding:15px 20px;
      margin:30px 0;
      border-radius:8px;
      font-size:15px;
      line-height:1.5;
    }
    #calendar-root{margin-top:40px;}
  </style>
</head>
<body>
<header>
  <div class="container">
    <h1>Scholar AI</h1>
    <nav>
      <ul>
        <li><a href="/">Home</a></li>
        <li class="dropdown">
          <a href="javascript:void(0)" class="dropbtn">Tests</a>
          <div class="dropdown-content">
            <a href="/diagnostic">Diagnostic Test</a>
            <a href="/learning_style">Learning Style</a>
          </div>
        </li>
        <li><a href="/chatbot">Chatbot</a></li>
        <li><a href="/schedule">Schedule</a></li>
        <li><a href="/results">Results</a></li>
      </ul>
    </nav>
  </div>
</header>

<main class="container">
  <!-- learner context (diagnostic + learning style) -->
  <section id="learner-summary">
    <!-- Filled dynamically -->
    <em>Loading your profile…</em>
  </section>

  <!-- intake wizard mount -->
  <section id="intake-root"></section>

  <!-- calendar mount -->
  <section id="calendar-root"></section>
</main>

<footer>
  <div class="container">
    <p>&copy; 2025 Scholar AI. All rights reserved.</p>
  </div>
</footer>

<!-- JS bundles -->
<script type="module" src="{{ url_for('static', filename='plan_intake.js') }}"></script>
<script type="module" src="{{ url_for('static', filename='plan_calendar.js') }}"></script>

<!-- tiny bootstrap script to expose learner profile & summary -->
<script>
/* On load fetch diagnostic summary & learning style once */
fetch("/get_user_profile")
  .then(r => r.ok ? r.json() : Promise.reject())
  .then(data => {
      window.LEARNER_PROFILE = data;            // accessible to modules
      const box=document.getElementById("learner-summary");
      if(!data || Object.keys(data).length===0){
        box.innerHTML="<strong>No profile data yet.</strong> Complete a diagnostic test and learning‑style assessment for best results.";
        return;
      }
      const styleName={
        visual:"Visual",auditory:"Auditory",
        reading_writing:"Reading/Writing",kinesthetic:"Kinesthetic"
      }[data.learning_style]||data.learning_style;
      box.innerHTML=
        `<strong>Learning Style:</strong> ${styleName}<br>`+
        `<strong>Diagnostic Summary:</strong> ${data.diagnostic_summary}`;
  })
  .catch(()=>{document.getElementById("learner-summary").textContent="Unable to load profile data.";});
</script>
</body>
</html>
</file>

<file path="templates/chatbot.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chatbot | Scholar AI</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='chat.css') }}">
  <style>
    /* Add these styles to your chat.css file */
    .chat-message {
      margin: 10px 0;
      padding: 12px 16px;
      border-radius: 18px;
      max-width: 80%;
      line-height: 1.4;
    }
    
    .user-message {
      background-color: #e3f2fd;
      margin-left: auto;
      border-bottom-right-radius: 4px;
    }
    
    .bot-message {
      background-color: #f1f1f1;
      margin-right: auto;
      border-bottom-left-radius: 4px;
    }
    
    .bot-message p {
      margin: 8px 0;
    }
    
    .bot-message strong {
      font-weight: 600;
      color: #2c3e50;
    }
    
    .bot-message em {
      font-style: italic;
    }
    
    .bot-message ul, .bot-message ol {
      margin: 8px 0;
      padding-left: 24px;
    }
    
    .bot-message code {
      background-color: #f5f5f5;
      padding: 2px 4px;
      border-radius: 4px;
      font-family: monospace;
    }
    
    .bot-message pre {
      background-color: #f5f5f5;
      padding: 10px;
      border-radius: 4px;
      overflow-x: auto;
      margin: 10px 0;
    }
    
    .typing-indicator {
      display: inline-block;
      padding-left: 4px;
    }
    
    .typing-indicator span {
      height: 8px;
      width: 8px;
      background-color: #666;
      border-radius: 50%;
      display: inline-block;
      margin-right: 2px;
      opacity: 0.4;
    }
    
    .typing-indicator span:nth-child(1) {
      animation: typing 1s infinite;
    }
    
    .typing-indicator span:nth-child(2) {
      animation: typing 1s infinite 0.2s;
    }
    
    .typing-indicator span:nth-child(3) {
      animation: typing 1s infinite 0.4s;
    }
    
    @keyframes typing {
      0% { opacity: 0.4; }
      50% { opacity: 1; }
      100% { opacity: 0.4; }
    }

    /* Learning style badge */
    .learning-style-badge {
      display: inline-block;
      padding: 4px 10px;
      border-radius: 15px;
      font-size: 14px;
      margin-right: 10px;
      color: black;
      font-weight: 500;
    }

    .badge-visual {
      background-color: #67a973;
    }

    .badge-auditory {
      background-color: #e5a553;
    }

    .badge-reading-writing {
      background-color: #823aa9;
    }

    .badge-kinesthetic {
      background-color: #6bb0d8;
    }

    .chat-status {
      background-color: #f8f9fa;
      padding: 10px 15px;
      border-radius: 8px;
      margin-bottom: 15px;
      font-size: 14px;
    }

    .status-info {
      color: #2c3e50;
    }

    .status-warning {
      color: #e67e22;
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
      <h1>Scholar AI</h1>
      <nav>
        <ul>
          <li><a href="/">Home</a></li>
          <li class="dropdown">
            <a href="javascript:void(0)" class="dropbtn">Tests</a>
            <div class="dropdown-content">
              <a href="/diagnostic">Diagnostic Test</a>
              <a href="/learning_style">Learning Style</a>
            </div>
          </li>
          <li><a href="/chatbot">Chatbot</a></li>
          <li><a href="/schedule">Schedule</a></li>
          <li><a href="/results">Results</a></li>
        </ul>
      </nav>
    </div>
  </header>

  <section class="chat-instructions container">
    <h2>How to Use</h2>
    <p>Welcome to the Scholar AI Chatbot! Type your queries in the input box and press 'Send' to start a conversation with our AI-powered assistant.</p>
    <ul>
      <li>Ask educational questions and get AI-generated responses.</li>
      <li>Use clear and concise language for better responses.</li>
      <li>Format text with **bold**, *italics*, or `code` for better readability.</li>
      <li>Enjoy interactive and engaging learning!</li>
    </ul>
  </section>

  <main class="chat-container container">
    <div id="chat-status" class="chat-status">
      <!-- Status information will be inserted here -->
    </div>
    <div id="chat-box" class="chat-log">
      <!-- Chat messages will appear here -->
    </div>
    <form id="chat-form" class="chat-form">
      <textarea id="chat-input" placeholder="Type your message here..." autocomplete="off" required></textarea>
      <button type="submit" class="send-button">Send</button>
    </form>
  </main>

  <footer>
    <div class="container">
      <p>&copy; 2025 Scholar AI. All rights reserved.</p>
    </div>
  </footer>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const chatForm = document.getElementById('chat-form');
      const chatInput = document.getElementById('chat-input');
      const chatBox = document.getElementById('chat-box');
      const chatStatus = document.getElementById('chat-status');
      
      // Check for learning style and diagnostic test status
      checkStatus();
      
      function checkStatus() {
        const statusMessages = [];
        
        // Check for diagnostic test results
        fetch('/check_diagnostic_status', {
          method: 'GET'
        })
        .then(response => response.json())
        .then(data => {
          if (!data.has_diagnostic) {
            statusMessages.push(`
              <div class="status-warning">
                <strong>Tip:</strong> Take a <a href="/diagnostic">diagnostic test</a> for more personalized assistance.
              </div>
            `);
          }
          
          // Check for learning style
          return fetch('/check_learning_style_status', { method: 'GET' });
        })
        .then(response => response.json())
        .then(data => {
          if (data.has_learning_style) {
            const styleDisplay = {
              'visual': 'Visual',
              'auditory': 'Auditory',
              'reading_writing': 'Reading/Writing',
              'kinesthetic': 'Kinesthetic'
            };
            
            const styleName = styleDisplay[data.learning_style] || data.learning_style;
            const badgeClass = `badge-${data.learning_style}`;
            
            statusMessages.push(`
              <div class="status-info">
                <strong>Learning Style:</strong> 
                <span class="learning-style-badge ${badgeClass}">${styleName}</span>
                Responses will be tailored to your learning style.
              </div>
            `);
          } else {
            statusMessages.push(`
              <div class="status-warning">
                <strong>Tip:</strong> Take the <a href="/learning_style">learning style assessment</a> for customized learning.
              </div>
            `);
          }
          
          // Update status section
          if (statusMessages.length > 0) {
            chatStatus.innerHTML = statusMessages.join('');
            chatStatus.style.display = 'block';
          } else {
            chatStatus.style.display = 'none';
          }
        })
        .catch(error => {
          console.error('Error checking status:', error);
        });
      }
      
      // Function to format the bot's response
      function formatBotResponse(text) {
        // Replace **bold** with <strong>bold</strong>
        text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        // Replace *italics* with <em>italics</em>
        text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
        // Replace `code` with <code>code</code>
        text = text.replace(/`(.*?)`/g, '<code>$1</code>');
        // Replace newlines with <br> and wrap paragraphs in <p>
        text = text.split('\n\n').map(paragraph => {
          if (paragraph.trim() === '') return '';
          return `<p>${paragraph.replace(/\n/g, '<br>')}</p>`;
        }).join('');
        
        return text;
      }
      
      // Function to add a message to the chat
      function addMessage(content, isUser) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${isUser ? 'user-message' : 'bot-message'}`;
        
        if (isUser) {
          messageDiv.textContent = content;
        } else {
          messageDiv.innerHTML = content;
        }
        
        chatBox.appendChild(messageDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
      }
      
      // Function to show typing indicator
      function showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'chat-message bot-message typing-indicator';
        typingDiv.id = 'typing-indicator';
        typingDiv.innerHTML = '<span></span><span></span><span></span>';
        chatBox.appendChild(typingDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
      }
      
      // Function to hide typing indicator
      function hideTypingIndicator() {
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
          typingIndicator.remove();
        }
      }
      
      // Handle form submission
      chatForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const message = chatInput.value.trim();
        if (message === '') return;
        
        // Add user message to chat
        addMessage(message, true);
        chatInput.value = '';
        
        // Show typing indicator
        showTypingIndicator();
        
        // Make real API call to backend
        fetch('/chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ message: message, subject: "General" })
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          // Hide typing indicator
          hideTypingIndicator();
          
          if (data.error) {
            addMessage(`Error: ${data.error}`, false);
          } else {
            // Format and add bot response
            addMessage(formatBotResponse(data.response), false);
          }
        })
        .catch(error => {
          // Hide typing indicator
          hideTypingIndicator();
          
          console.error('Error:', error);
          addMessage('Sorry, I encountered an error while processing your request. Please try again.', false);
        });
      });
      
      // Allow Shift+Enter for new lines, Enter to submit
      chatInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          chatForm.dispatchEvent(new Event('submit'));
        }
      });
    });
  </script>
</body>
</html>
</file>

<file path="templates/learning_styles.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Learning Style Diagnostic Test | Scholar AI</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}" />
  <style>
    /* Main container styling */
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    /* Learning styles overview */
    .learning-styles {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .style-card {
      background-color: #f8f9fa;
      border-radius: 12px;
      padding: 20px;
      box-shadow: 0 3px 6px rgba(0,0,0,0.1);
      text-align: center;
      transition: transform 0.3s;
      border-top: 4px solid;
    }
    
    .style-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .style-card h3 {
      margin-top: 0;
      color: #295281;
    }
    
    .style-card p {
      font-size: 14px;
      line-height: 1.5;
      color: #555;
    }
    
    /* Visual style */
    .visual {
      border-color: #67a973;
    }
    
    /* Auditory style */
    .auditory {
      border-color: #e5a553;
    }
    
    /* Reading/Writing style */
    .reading-writing {
      border-color: #823aa9;
    }
    
    /* Kinesthetic style */
    .kinesthetic {
      border-color: #6bb0d8;
    }
    .style-image-container {
    height: 200px; /* Fixed height for consistency */
    overflow: hidden;
    border-radius: 8px;
    margin: 10px 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
    /* Style for the images */
    .style-image {
    width: 100%;
    height: auto;
    object-fit: cover;
    border-radius: 10px;
  }
    
    /* Grid layout for questions */
    .questions-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 15px;
      margin-top: 20px;
    }
    
    /* Question card styling */
    .question-card {
      background-color: #f5f7fa;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      text-align: center;
      transition: transform 0.2s;
    }
    
    .question-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .question-card p {
      margin-bottom: 15px;
      font-size: 16px;
      line-height: 1.4;
      color: #333;
      min-height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    /* Compact slider styling */
    .slider-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 10px;
    }
    
    .slider-labels {
      display: flex;
      justify-content: space-between;
      width: 100%;
      margin-bottom: 5px;
      font-size: 12px;
    }
    
    .slider-labels span:first-child { color: #e74c3c; } /* Red for Disagree */
    .slider-labels span:last-child { color: #2ecc71; } /* Green for Agree */
    
    .slider {
      width: 90%;
      height: 8px;
      -webkit-appearance: none;
      background: #e74c3c; /* Start with red (disagree) */
      border-radius: 5px;
      outline: none;
      transition: background 0.2s;
    }
    
    .slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background: white;
      cursor: pointer;
      border: 2px solid #295281;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    
    /* Submit button styling */
    .submit-btn {
      display: block;
      margin: 30px auto;
      padding: 12px 30px;
      background-color: #295281;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 16px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    
    .submit-btn:hover {
      background-color: #1d3a5f;
    }
    
    /* Result modal styling */
    #result-modal {
      display: none;
      position: fixed;
      z-index: 200;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.5);
      align-items: center;
      justify-content: center;
    }

    #result-modal h2 {
    color: #295281;
    margin-bottom: 25px;
    font-size: 28px;
    }

    .result-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    }
    .result-image {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    object-fit: cover;
    border: 5px solid;
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
  }
    #result-modal .modal-content {
    width: 90%;
    max-width: 600px;
    padding: 40px;
    text-align: center;
    border-radius: 15px;
    background: linear-gradient(145deg, #f8f9fa, #ffffff);
    box-shadow: 0 10px 30px rgba(0,0,0,0.15);
    border-top: 5px solid #295281;
    }
    .visual-result { border-color: rgb(121, 223, 164); }
    .auditory-result { border-color: #e1b882; }
    .reading-writing-result { border-color: #a678be; }
    .kinesthetic-result { border-color: #a5c5d7; }

    #result-text {
    font-size: 18px;
    line-height: 1.6;
    color: #333;
    background: #f5f7fa;
    padding: 20px;
    border-radius: 10px;
    border-left: 4px solid #295281;
    }

    #result-details {
    margin-top: 15px;
    font-style: italic;
    color: #555;
    }

    .close {
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    transition: color 0.3s;
    }

    .close:hover {
    color: #333;
    cursor: pointer;
    }
    #result-modal .close {
      position: absolute;
      right: 20px;
      top: 15px;
      font-size: 24px;
      cursor: pointer;
      color: #777;
    }

    .style-card p {
    font-size: 17px; /* Slightly larger paragraph text */
    line-height: 1.6; /* More spacing between lines */
    color: #444; /* Darker text color for better readability */
    }
    header .container {
      padding: 30px 20px; /* Increased from original */
      margin-bottom: 30px; /* Space below header */
    }

    .modal-content {
       transform: translateY(-20px);
       opacity: 0;
       transition: all 0.3s ease-out;
    }

    .modal-content.animate-in {
       transform: translateY(0);
       opacity: 1;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    /* Loading overlay styles */
    #loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 1.5em;
      font-weight: bold;
      z-index: 1000;
      display: none;
    }

    .spinner {
      width: 50px;
      height: 50px;
      border: 6px solid rgba(255, 255, 255, 0.3);
      border-top: 6px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 10px;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    /* Responsive adjustments */
    @media (max-width: 900px) {
      .questions-grid {
        grid-template-columns: 1fr;
      }
      
      .question-card p {
        min-height: auto;
      }
    }
    
    @media (max-width: 480px) {
      .question-card {
        padding: 15px;
      }
      
      .slider {
        width: 100%;
      }
      
      .learning-styles {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
      <h1>Scholar AI</h1>
      <nav>
        <ul>
          <li><a href="/">Home</a></li>
          <li class="dropdown">
            <a href="javascript:void(0)" class="dropbtn">Tests</a>
            <div class="dropdown-content">
              <a href="/diagnostic">Diagnostic Test</a>
              <a href="/learning_style">Learning Style</a>
            </div>
          </li>
          <li><a href="/chatbot">Chatbot</a></li>
          <li><a href="/schedule">Schedule</a></li>
          <li><a href="/results">Results</a></li>
        </ul>
      </nav>
    </div>
  </header>

  <main class="container">
    <section>
      <h2>Learning Styles Overview</h2>
      <div class="learning-styles">
        <!-- Visual Learning Style -->
        <div class="style-card visual">
          <h3>Visual Learners</h3>
          <!-- REPLACE THIS IMAGE TAG WITH YOUR VISUAL LEARNING IMAGE -->
          <img src="{{ url_for('static', filename='images/visual.jpg') }}" alt="Visual Learning" class="style-image">
          <p>Learn best through <strong>seeing</strong>. They prefer <strong>diagrams</strong>, <strong>charts</strong>, <strong>pictures</strong>, and <strong>spatial understanding</strong>.</p>
        </div>
        
        <!-- Auditory Learning Style -->
        <div class="style-card auditory">
          <h3>Auditory Learners</h3>
          <!-- REPLACE THIS IMAGE TAG WITH YOUR AUDITORY LEARNING IMAGE -->
          <img src="{{ url_for('static', filename='images/auditory.jpg') }}" alt="Auditory Learning" class="style-image">
          <p>Learn best through <strong>listening</strong>. They benefit from <strong>lectures</strong>, <strong>discussions</strong>, and <strong>verbal explanations</strong>.</p>
        </div>
        
        <!-- Reading/Writing Learning Style -->
        <div class="style-card reading-writing">
          <h3>Reading/Writing Learners</h3>
          <!-- REPLACE THIS IMAGE TAG WITH YOUR READING/WRITING LEARNING IMAGE -->
          <img src="{{ url_for('static', filename='images/reading.jpg') }}" alt="Reading/Writing Learning" class="style-image">
          <p>Learn best through <strong>written words</strong>. They prefer <strong>reading</strong> and <strong>writing</strong> to acquire information.</p>
        </div>
        
        <!-- Kinesthetic Learning Style -->
        <div class="style-card kinesthetic">
          <h3>Kinesthetic Learners</h3>
          <!-- REPLACE THIS IMAGE TAG WITH YOUR KINESTHETIC LEARNING IMAGE -->
          <img src="{{ url_for('static', filename='images/kinesthetic.jpg') }}" alt="Kinesthetic Learning" class="style-image">
          <p>Learn best through <strong>doing</strong>. They prefer <strong>physical activities</strong>, <strong>hands-on tasks</strong>, and <strong>movement</strong>.</p>
        </div>
      </div>
    </section>
    <section>
      <h2>Instructions</h2>
      <p>
        For each statement below, adjust the slider to indicate your level of agreement.
        The left end represents "Disagree" and the right end "Agree." Answer all 20 questions
        honestly to help determine your best learning style.
      </p>
    </section>

    <form id="learning-style-form">
      <div class="questions-grid">
        <!-- Question 1 (Kinesthetic) -->
        <div class="question-card">
          <p>I prefer hands-on learning activities to understand new concepts.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q1" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 2 (Visual) -->
        <div class="question-card">
          <p>I learn best when I use diagrams, charts, or other visual aids.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q2" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 3 (Auditory) -->
        <div class="question-card">
          <p>I remember things better when I hear them rather than when I read them.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q3" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 4 (Reading/Writing) -->
        <div class="question-card">
          <p>I learn best when I take notes or write summaries of what I'm studying.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q4" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 5 (Kinesthetic) -->
        <div class="question-card">
          <p>I enjoy learning through physical movement or role-playing activities.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q5" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 6 (Auditory) -->
        <div class="question-card">
          <p>I learn best by listening to lectures or discussions.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q6" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 7 (Visual) -->
        <div class="question-card">
          <p>I find it easier to understand complex concepts when I see them visually.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q7" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 8 (Reading/Writing) -->
        <div class="question-card">
          <p>I find that writing summaries or lists helps me understand and remember information.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q8" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 9 (Kinesthetic) -->
        <div class="question-card">
          <p>I often remember information better when I can touch or manipulate objects related to the subject.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q9" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 10 (Auditory) -->
        <div class="question-card">
          <p>I prefer to discuss topics with others to understand them.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q10" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 11 (Visual) -->
        <div class="question-card">
          <p>I often use visual aids such as images or videos to support my learning.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q11" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 12 (Reading/Writing) -->
        <div class="question-card">
          <p>I often use written instructions or textbooks to study new topics.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q12" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 13 (Kinesthetic) -->
        <div class="question-card">
          <p>I find it easier to understand instructions if I can perform the task immediately.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q13" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 14 (Auditory) -->
        <div class="question-card">
          <p>I often use my voice to help memorize and process information.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q14" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 15 (Visual) -->
        <div class="question-card">
          <p>I prefer reading materials that include pictures or infographics.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q15" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 16 (Reading/Writing) -->
        <div class="question-card">
          <p>I enjoy taking detailed notes and rewriting them to reinforce my learning.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q16" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 17 (Kinesthetic) -->
        <div class="question-card">
          <p>I enjoy learning through physical activities and interactive experiences.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q17" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 18 (Auditory) -->
        <div class="question-card">
          <p>I find that listening to audio recordings aids my learning.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q18" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 19 (Visual) -->
        <div class="question-card">
          <p>I recall information better when I see it in written or drawn form.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q19" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
        
        <!-- Question 20 (Reading/Writing) -->
        <div class="question-card">
          <p>I enjoy writing out detailed explanations to help myself understand a topic better.</p>
          <div class="slider-container">
            <div class="slider-labels">
              <span>Disagree</span>
              <span>Agree</span>
            </div>
            <input type="range" name="q20" class="slider" min="1" max="100" value="50" required>
          </div>
        </div>
      </div>
      
      <button type="submit" class="submit-btn">Submit Test</button>
    </form>
  </main>

  <!-- Result Modal -->
  <div id="result-modal">
    <div class="modal-content">
      <span class="close" onclick="closeResultModal()">&times;</span>
      <div class="result-content">
        <img id="result-style-image" class="result-image" src="" alt="Learning Style">
        <h2>Your Learning Style</h2>
        <p id="result-text"></p>
        <p id="result-details"></p>
        <div id="result-tips"></div>
      </div>
    </div>
  </div>

  <!-- Loading Overlay -->
  <div id="loading-overlay">
    <div class="spinner"></div>
    <p id="loading-text">Processing your learning style...</p>
  </div>

  <footer>
    <div class="container">
      <p>&copy; 2025 Scholar AI. All rights reserved.</p>
    </div>
  </footer>

  <script>
    // Update slider appearance based on value
    const sliders = document.querySelectorAll('.slider');
    sliders.forEach(slider => {
      updateSliderStyle(slider);
      slider.addEventListener('input', function() {
        updateSliderStyle(this);
      });
    });
    
    function updateSliderStyle(slider) {
      const val = parseInt(slider.value);
      const red = Math.round(231 - (231 - 46) * (val/100));
      const green = Math.round(76 + (171 - 76) * (val/100));
      const blue = Math.round(60 - (60 - 182) * (val/100));
      slider.style.background = `rgb(${red}, ${green}, ${blue})`;
    }
    
    // Show loading overlay
    function showLoading(message) {
      document.getElementById('loading-text').textContent = message || 'Processing...';
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loading-overlay').style.display = 'none';
    }
    
    document.getElementById('learning-style-form').addEventListener('submit', function(event) {
      event.preventDefault();
      
      // Calculate scores
      const responses = [];
      for (let i = 1; i <= 20; i++) {
        const value = document.querySelector(`input[name="q${i}"]`).value;
        if (!value) {
          alert('Please answer all questions before submitting.');
          return;
        }
        responses.push(parseInt(value));
      }
      
      const scores = {
        "Visual": responses[1] + responses[5] + responses[9] + responses[13] + responses[17],
        "Auditory": responses[2] + responses[6] + responses[10] + responses[14] + responses[18],
        "Reading/Writing": responses[3] + responses[7] + responses[11] + responses[15] + responses[19],
        "Kinesthetic": responses[0] + responses[4] + responses[8] + responses[12] + responses[16]
      };
      
      const maxScore = Math.max(...Object.values(scores));
      const learnerType = Object.keys(scores).find(key => scores[key] === maxScore);
      
      // Result configuration
      const resultConfig = {
        "Visual": {
          image: "{{ url_for('static', filename='images/visual.jpg') }}",
          colorClass: "visual-result",
          description: "You learn best through visual aids like diagrams, charts, and pictures.",
          tips: ["Use mind maps", "Highlight with colors", "Watch videos"]
        },
        "Auditory": {
          image: "{{ url_for('static', filename='images/auditory.jpg') }}",
          colorClass: "auditory-result",
          description: "You learn most effectively through listening and verbal explanations.",
          tips: ["Record lectures", "Join study groups", "Use mnemonics"]
        },
        "Reading/Writing": {
          image: "{{ url_for('static', filename='images/reading.jpg') }}",
          colorClass: "reading-writing-result",
          description: "You prefer learning through written words and text-based materials.",
          tips: ["Rewrite notes", "Create outlines", "Make flashcards"]
        },
        "Kinesthetic": {
          image: "{{ url_for('static', filename='images/kinesthetic.jpg') }}",
          colorClass: "kinesthetic-result",
          description: "You learn best through hands-on activities and physical experiences.",
          tips: ["Use physical objects", "Take movement breaks", "Build models"]
        }
      };
      
      // Update UI with results
      const result = resultConfig[learnerType];
      document.getElementById("result-style-image").src = result.image;
      document.getElementById("result-style-image").className = `result-image ${result.colorClass}`;
      document.getElementById("result-text").textContent = learnerType;
      document.getElementById("result-details").textContent = result.description;
      
      // Create tips list
      const tipsList = result.tips.map(tip => `<li>${tip}</li>`).join('');
      document.getElementById("result-tips").innerHTML = `
        <h3>Study Tips:</h3>
        <ul>${tipsList}</ul>
      `;
      
      // Convert learning style from display name to backend key
      const styleMap = {
        "Visual": "visual",
        "Auditory": "auditory",
        "Reading/Writing": "reading_writing",
        "Kinesthetic": "kinesthetic"
      };
      
      // Prepare API request data
      const apiData = {
        visual: scores["Visual"],
        auditory: scores["Auditory"],
        reading_writing: scores["Reading/Writing"],
        kinesthetic: scores["Kinesthetic"]
      };
      
      // Show loading animation
      showLoading('Saving your learning style...');
      
      // Send data to backend
      fetch('/submit_learning_style', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(apiData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        hideLoading();
        
        // Show modal with animation
        document.getElementById("result-modal").style.display = "flex";
        setTimeout(() => {
          document.querySelector(".modal-content").classList.add("animate-in");
          
          // Add a button to view detailed results
          setTimeout(() => {
            // After showing results, give the option to navigate to results page
            const viewResultsBtn = document.createElement('button');
            viewResultsBtn.className = 'submit-btn';
            viewResultsBtn.style.marginTop = '20px';
            viewResultsBtn.textContent = 'View Detailed Results';
            viewResultsBtn.onclick = function() {
              window.location.href = '/results';
            };
            document.querySelector('.result-content').appendChild(viewResultsBtn);
          }, 1000);
        }, 10);
      })
      .catch(error => {
        console.error('Error saving learning style:', error);
        hideLoading();
        alert('There was an error saving your learning style. Please try again.');
      });
    });
    
    function closeResultModal() {
      document.querySelector(".modal-content").classList.remove("animate-in");
      setTimeout(() => {
        document.getElementById("result-modal").style.display = "none";
      }, 300);
    }
    
    window.onclick = function(event) {
      if (event.target === document.getElementById("result-modal")) {
        closeResultModal();
      }
    };
  </script>
</body>
</html>
</file>

<file path="templates/diagnostic.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Diagnostic Test | Scholar AI</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='chat.css') }}">
  <style>
    /* Loading overlay styles */
    #loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 1.5em;
      font-weight: bold;
      z-index: 1000;
      display: none;
    }

    .spinner {
      width: 50px;
      height: 50px;
      border: 6px solid rgba(255, 255, 255, 0.3);
      border-top: 6px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 10px;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    /* Question and answer styling */
    .question-answer-pair {
      margin-bottom: 30px;
      padding: 15px;
      background: #f8f9fa;
      border-radius: 8px;
    }
    
    .question-text {
      font-weight: bold;
      margin-bottom: 10px;
      font-size: 1.1em;
    }
    
    .answer-choices {
      margin-bottom: 15px;
      padding-left: 20px;
    }
    
    .answer-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 1em;
    }
    
    #answers-form {
      margin-top: 20px;
    }
    
    #questions-container {
      counter-reset: question-counter;
    }
    
    .question-text:before {
      counter-increment: question-counter;
      content: "Question " counter(question-counter) ": ";
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
      <h1>Scholar AI</h1>
      <nav>
        <ul>
          <li><a href="/">Home</a></li>
          <li class="dropdown">
            <a href="javascript:void(0)" class="dropbtn">Tests</a>
            <div class="dropdown-content">
              <a href="/diagnostic">Diagnostic Test</a>
              <a href="/learning_style">Learning Style</a>
            </div>
          </li>
          <li><a href="/chatbot">Chatbot</a></li>
          <li><a href="/schedule">Schedule</a></li>
          <li><a href="/results">Results</a></li>
        </ul>
      </nav>
    </div>
  </header>

  <main class="chat-container container">
    <div id="diagnostic-test-section">
      <h2>Generate a Diagnostic Test</h2>
      <form id="generate-test-form">
        <label for="subject">Subject:</label>
        <input type="text" id="subject" placeholder="Enter subject (e.g., Mathematics)" required>

        <label for="grade-level">Grade Level:</label>
        <input type="text" id="grade-level" placeholder="Enter grade level (e.g., 7)" required>

        <label for="topic">Topic:</label>
        <input type="text" id="topic" placeholder="Enter topic (e.g., Algebra)" required>

        <button type="submit">Generate Test</button>
      </form>

      <!-- Answers Form (hidden until test is generated) -->
      <form id="answers-form" style="display:none;">
        <h3>Diagnostic Test</h3>
        <p>Please answer each question below:</p>
        <div id="questions-container"></div>
        <button type="submit">Submit Answers</button>
      </form>
    </div>
  </main>

  <footer>
    <div class="container">
      <p>&copy; 2025 Scholar AI. All rights reserved.</p>
    </div>
  </footer>

  <!-- Loading Overlay -->
  <div id="loading-overlay">
    <div class="spinner"></div>
    <p id="loading-text">Generating Test...</p>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const generateForm = document.getElementById('generate-test-form');
      const answersForm = document.getElementById('answers-form');
      const questionsContainer = document.getElementById('questions-container');
      const loadingOverlay = document.getElementById('loading-overlay');
      const loadingText = document.getElementById('loading-text');

      generateForm.addEventListener('submit', function(event) {
        event.preventDefault();

        const subject = document.getElementById('subject').value.trim();
        const gradeLevel = document.getElementById('grade-level').value.trim();
        const topic = document.getElementById('topic').value.trim();

        loadingText.textContent = "Generating Test...";
        loadingOverlay.style.display = "flex";

        fetch('/generate_test', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            subject: subject,
            grade_level: gradeLevel,
            topic: topic
          })
        })
        .then(response => response.json())
        .then(data => {
          loadingOverlay.style.display = "none";

          if (data.diagnostic_test) {
            createQuestionAnswerPairs(data.diagnostic_test);
            answersForm.style.display = 'block';
            document.querySelector('.question-answer-pair')?.scrollIntoView({ behavior: 'smooth' });
          } else if (data.error) {
            alert(data.error);
          }
        })
        .catch(error => {
          console.error('Error generating test:', error);
          alert('An error occurred while generating the test.');
          loadingOverlay.style.display = "none";
        });
      });

      answersForm.addEventListener('submit', function(e) {
        e.preventDefault();

        loadingText.textContent = "Submitting Answers...";
        loadingOverlay.style.display = "flex";

        const answers = {};
        document.querySelectorAll('.answer-input').forEach((input, index) => {
          answers[`answer${index + 1}`] = input.value;
        });

        fetch('/submit_test', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(answers)
        })
        .then(response => response.json())
        .then(data => {
          loadingOverlay.style.display = "none";
          if (data.status === 'ok') {
            alert('Answers submitted successfully!');
          } else {
            alert('Error submitting answers.');
          }
        })
        .catch(err => {
          console.error('Error submitting answers:', err);
          alert('Submission error occurred.');
          loadingOverlay.style.display = "none";
        });
      });
      
      function createQuestionAnswerPairs(testContent) {
        questionsContainer.innerHTML = '';
        
        // Split by double newlines to separate questions
        const rawQuestions = testContent.split(/\n\n+/);
        let questionCount = 0;
        
        rawQuestions.forEach((rawQuestion) => {
          if (questionCount >= 10) return;
          
          const lines = rawQuestion.split('\n').filter(line => line.trim() !== '');
          if (lines.length === 0) return;
          
          const questionText = lines[0];
          const answerChoices = lines.slice(1);
          
          if (questionText && questionText.trim() !== '') {
            questionCount++;
            createQuestionElement(questionCount, questionText, answerChoices);
          }
        });
      }
      
      function createQuestionElement(number, questionText, answerChoices) {
        const pairDiv = document.createElement('div');
        pairDiv.className = 'question-answer-pair';
        
        const questionEl = document.createElement('div');
        questionEl.className = 'question-text';
        questionEl.textContent = questionText;
        
        pairDiv.appendChild(questionEl);
        
        if (answerChoices.length > 0) {
          const choicesEl = document.createElement('div');
          choicesEl.className = 'answer-choices';
          
          answerChoices.forEach(choice => {
            const choiceEl = document.createElement('div');
            choiceEl.textContent = choice;
            choicesEl.appendChild(choiceEl);
          });
          
          pairDiv.appendChild(choicesEl);
        }
        
        const answerInput = document.createElement('input');
        answerInput.type = 'text';
        answerInput.className = 'answer-input';
        answerInput.required = true;
        answerInput.placeholder = answerChoices.length > 0 ? 
          'Enter your choice (A, B, C, D) or answer' : 
          'Type your answer here...';
        
        pairDiv.appendChild(answerInput);
        questionsContainer.appendChild(pairDiv);
      }
    });
  </script>
</body>
</html>
</file>

<file path="topic_prompts/initial_prompt.txt">
You are Scholar AI, an intelligent and adaptive tutoring assistant designed to help students learn effectively.

Your primary tasks are to:
1. Analyze diagnostic test results to identify strengths and weaknesses
2. Provide personalized feedback and guidance based on the student's learning style
3. Create customized study plans that respect the student's schedule and abilities

When a student first contacts you, ALWAYS begin by analyzing their existing diagnostic test results if available. Do not ask "which subject would you like to study" or similar questions if test results are already in the context. Instead, immediately provide helpful feedback on their performance.

If a student explicitly asks about a new subject or topic, you can then switch to that subject.

Role & Purpose:
You are an AI Scholar, an intelligent and adaptive tutoring assistant designed to help students diagnose their weaknesses, create study schedules, and provide targeted learning resources. Your goal is to identify student strengths and weaknesses through diagnostic tests and generate personalized study plans that fit their learning style and schedule.

Core Functionality:
1. Diagnostic Analysis
Analyze the student's completed diagnostic test results.
Provide clear explanation of:
- Which questions they answered correctly
- Where they made mistakes and why
- Patterns in their knowledge gaps
- Recommended areas to focus on

2. Learning Style Adaptation
Customize your explanations based on the student's identified learning style:
- Visual learners: Use diagrams, charts, and spatial descriptions
- Auditory learners: Emphasize verbal explanations and discussion-based approaches
- Reading/Writing learners: Provide structured text explanations, lists, and written resources
- Kinesthetic learners: Relate concepts to physical activities and real-world applications

3. Personalized Guidance
Provide actionable next steps for improvement:
- Specific study techniques aligned with their learning style
- Resource recommendations (videos, practice problems, readings)
- Time management suggestions
- Motivation and encouragement

Behavioral Guidelines:
- Be supportive and encouraging, never judgmental about mistakes
- Explain concepts clearly and at the appropriate level
- Adapt to the student's pace and needs
- Balance depth with accessibility
- Focus on practical advice they can implement immediately
</file>

<file path="templates/index.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Scholar AI</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}" />
  <script defer src="{{ url_for('static', filename='script.js') }}"></script>
</head>
<body>
  <header>
    <div class="container">
      <h1>Scholar AI</h1>
      <nav>
        <ul>
          <li><a href="/">Home</a></li>
          <li class="dropdown">
            <a href="javascript:void(0)" class="dropbtn">Tests</a>
            <div class="dropdown-content">
              <a href="/diagnostic">Diagnostic Test</a>
              <a href="/learning_style">Learning Style</a>
            </div>
          </li>
          <li><a href="/chatbot">Chatbot</a></li>
          <li><a href="/schedule">Schedule</a></li>
          <li><a href="/results">Results</a></li>
        </ul>
      </nav>
    </div>
  </header>
  <section id="hero" class="hero">
    <div class="container">
      <h2>AI-Powered Learning for Everyone</h2>
      <p>Enhance your teaching and learning experience with Scholar AI.</p>
    </div>
  </section>
  <section id="features" class="features">
    <div class="container">
      <h2>Key Features</h2>
      <div class="feature">
        <h3>Student Analytics</h3>
        <p>Track and improve student performance with AI insights.</p>
      </div>
      <div class="feature">
        <h3>Interactive AI Tutor</h3>
        <p>Get real-time assistance with AI-powered tutoring.</p>
      </div>
      <div class="feature">
        <h3>Lesson Planning</h3>
        <p>AI-generated lesson plans tailored to your needs.</p>
      </div>
      
    </div>
  </section>
  <section id="about" class="about">
    <div class="container">
      <h2>About Scholar AI</h2>
      <p>Scholar AI leverages cutting-edge artificial intelligence to enhance educational experiences for both teachers and students.</p>
      <p></p>
      <p>To utilize ScholarAI make sure to head to the diagnostic page before getting feadback from our AI.</p>
    </div>
  </section>
  <section id="contact" class="contact">
    <div class="container">
      <h2>Contact Us</h2>
      <p>
        Have questions or need assistance? Reach out to us at
        <a href="mailto:support@scholarai.com">support@scholarai.com</a>.
      </p>
    </div>
  </section>
  <footer>
    <div class="container">
      <p>&copy; 2025 Scholar AI. All rights reserved.</p>
    </div>
  </footer>
</body>
</html>
</file>

</files>
